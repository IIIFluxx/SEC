// Hello world JavaCC grammar file.

// Notes:
// * To change the class name (MyParser), you can simply change it here, but the .java code will 
//   need to be updated accordingly.
// * To change the *package* name, you also need to edit build.gradle.

PARSER_BEGIN(MyParser)
package edu.curtin.examplepackage;
public class MyParser 
{

}
PARSER_END(MyParser)


// SKIP = characters that should be skipped.
SKIP : { " " | "\n" | "\r" | "\t" }

// TOKEN = What get parsed. Form: "< NAME: regex >"
TOKEN: {
    // bus(1234)
    // (["0"-"9"])+ means one-or-more digits.

    < NUMBERS : (["0"-"9"])+> |
    < ARROW : "->" > |
    // A-Z with Spaces. Can be any number of characters.
    // * means zero-or-more of whatever is in parentheses
    < BUSNAME : ["\""] (["_", "-", "a"-"z", "A"-"Z", " "])+ ["\""] > |
    //< TIMES : "at " ["0"-"9"](["0"-"9"])?":"["0"-"9"]["0"-"9"] > |
    < AT : "at" > |
    < TIMES : ["0"-"9"](["0"-"9"])?":"["0"-"9"]["0"-"9"] > |
    < VIA : "via" > |
    < STOPTITLE : "stops" > |
    //< STOPS : (["0"-"9"])+ > |
    < FREE : "free" >
}

// Java Code:
void helloWorld() :
{
    Token value;
    Token name;
    Token times;
    Token stopToken;
}

// BNF Expression for helloWorld():
{
    // The BNF expression specifies what to “expect” in the input text, and what to do about it:
    (
        "bus(" value=<NUMBERS> ")"
        {
          System.out.println("This is the bus number - " + value.image);
        }
        <ARROW> name=<BUSNAME>
        {
            System.out.println("This is the bus name - " + name.image);
            System.out.println("Enter bus times: ");
        }

        <AT>

        (
            times=<TIMES>
            {
                System.out.println(times.image);
            }
        )+ // One or more.

        <VIA><STOPTITLE>
        stopToken=<NUMBERS>
        {
            System.out.println("The following stops: " + stopToken.image);
        }
        (
            stopToken=<NUMBERS>
            {
                System.out.println("The following stops: " + stopToken.image);
            }
        )+ // One or more.

        [
            <FREE>
            {
                System.out.println("Bus is free");
            }
        ] // [] == optional.
		
    )+ // Whole thing = one or more (must be one, can have multiple).
    <EOF>
}

